#!/usr/bin/hush

function GetWmName(id)
  let wm_name = ${ xprop -id $id | grep "^WM_NAME(STRING).*" | cut -d'=' -f2 }
  if std.type(wm_name) != "error" then
    let str = std.trim(wm_name.stdout)
    let len = std.len(str)
    # trim the leading and trailing '"'
    return std.substr(str, 1, len-2)
  end
  return nil
end

let settings = @[
  WS_START: "",
  WS_END: "",
  WS_SEPARATOR: "ﰊ ",
  FOREGROUND: nil,
  BACKGROUND: nil,
  ACCENT: nil,
  FOCUSED_FOREGROUND: "#fff",
  FOCUSED_BACKGROUND: nil,
  FOCUSED_ACCENT: "#ac21c4",
  URGENT_FOREGROUND: nil,
  URGENT_BACKGROUND: "#a22",
  URGENT_ACCENT: nil,
  ACCENT_MODE: "under"
]

let icons = @[
  default_icon: "",
  vim_icon: ""
]

function LoadSettings()
  for kv in std.iter(settings) do 
    let env = std.env(kv.key)
    if env != nil then
      if env == "none" then env = nil end
      settings[kv.key] = env 
    end
  end
end
LoadSettings()

# Add any custom icons to this lookup table.
# The lookup table is checked with various properties in the following order:
# 1. the classname bspwm assigned to the node at startup 
# 2. the current WM_NAME according to xprop
# 3. the first word of WM_NAME
# the return value can either be a string, or a function accepting a single 
# parameter: the client

function CreateIconLookup()
  let IconLookup = @[
    firefox: "",
    htop: "",
    Chromium: "", 
    discord: "ﭮ",
    Steam: "",
    Spotify: "",
    vim: icons.vim_icon,
    nvim: icons.vim_icon,
    vi: icons.vim_icon
  ]

  IconLookup["jetbrains-rider"] = function(c) "" end
  IconLookup["looking-glass-client"] = function(c) "" end
  IconLookup.default = function(c) 
    # try a second lookup using the current window name
    let wmname = GetWmName(c.id)
    if wmname == nil or wmname == "" or wmname == "default" then return settings.default_icon end
    
    if std.contains(IconLookup, wmname) then 
      return IconLookup[wmname]
    end 

    let firstWord = std.split(wmname, " ")[0]
    if std.contains(IconLookup, firstWord) then 
      return IconLookup[firstWord]
    end

    return icons.default_icon
  end

  IconLookup.Alacritty = function(client)
    # Check if the program running inside the terminal 
    # is present in the lookup table. If not, we just return a generic terminal
    # obviously this only works if the terminal emulator is configured to change its own WM_NAME 
    let r = IconLookup.default(client)
    if r == icons.default_icon then return "" end
    return r
  end
  return IconLookup
end

let IconLookup = CreateIconLookup()

function _GetIcon(client)
  let r = IconLookup.default
  if std.contains(IconLookup, client.className) then 
    r = IconLookup[client.className]
  end

  while std.type(r) == "function" do 
    r = r(client)
  end
  return r
end

function Pygmenter()
  function color(str, c, format) 
    "%{" ++ format ++ c ++ "}" ++ str ++ "%{" ++ format ++ "-}" 
  end

  # The accent syntax differs from fg / bg syntax for some reason /shrug
  function accent(str, c, acc) 
    "%{" ++ acc ++ c ++ "}%{+" ++ acc ++ "}" ++ str ++ "%{-" ++ acc ++ "}" 
  end
  let Overline = function(str, c) accent(str, c, "o") end
  let Underline = function(str, c) accent(str, c, "u") end

  let Accent = function(str, c) str end
  if settings.ACCENT_MODE == "both" then 
    Accent = function(str, c) Overline(Underline(str, c), c) end
  end
  if settings.ACCENT_MODE == "under" then Accent = Underline end 
  if settings.ACCENT_MODE == "over" then Accent = Overline end

  return @[
    Foreground: function(str, c) color(str, c, "F") end,
    Background: function(str, c) color(str, c, "B") end,
    Highlight: function(str) "%{R}" ++ str ++ "%{R}" end,
    Overline: Overline,
    Underline: Underline,
    Accent: Accent
  ]
end

let pygmenter = Pygmenter()

let subscripts = [ "₁", "₂", "₃", "₄", "₅", "₆", "₇", "₈", "₉", "₀" ]
let superscripts = [ "⁰", "¹", "²", "³", "⁴", "⁵", "⁶", "⁷", "⁸", "⁹", "ⁿ" ]

let s = std.to_string

function GetClients(root)
  function collectClients(node)
    let r = []
    if node == nil then return r end
    if std.contains(node, "client") and node.client != nil then
      node.client.id = node.id
      node.client._icon = _GetIcon(node.client)
      std.push(r, node.client)
    end
    if std.contains(node, "firstChild") then 
      for client in std.iter(collectClients(node.firstChild)) do 
        std.push(r, client)
      end
    end
    if std.contains(node, "secondChild") then 
      for client in std.iter(collectClients(node.secondChild)) do 
        std.push(r, client)
      end 
    end 
    return r
  end
  return collectClients(root)
end

function GetWindows()
  let wm = std.json.decode(${bspc wm -d}.stdout)
  let monitors = []

  for monitor in std.iter(wm.monitors) do 
    let workspaces = []
    let focusedDesktop = monitor.focusedDesktopId
    let monitorFocused = monitor.id == wm.focusedMonitorId
    std.push(monitors, @[
      name: monitor.name, 
      workspaces: workspaces,
      focused: monitorFocused
    ])

    let len = std.len(monitor.desktops)
    for i in std.range(0, len, 1) do
      let workspace = monitor.desktops[i]
      let windows = []
      let desktopFocused = monitorFocused and workspace.id == focusedDesktop
      let focusedNodeId = workspace.focusedNodeId

      let root = workspace.root
      let clients = GetClients(root)

      let len = std.len(clients)
      if len > 0 or desktopFocused then
        let ws = @[ 
          name: workspace.name, 
          idx: i, 
          focused: desktopFocused,
          windows: windows 
        ]
        for item in std.iter(clients) do 
          item.parent = ws
          item.focused = desktopFocused and item.id == focusedNodeId
          std.push(windows, item)
        end
        std.push(workspaces, ws)
      end
    end
  end

  return monitors
end

function GetSetting(key)
end

function GetSeparator(key)
  let defaults = @[]

  let env = std.env(key)
  if env == nil then return defaults[key] end
  if env == "" or env == "none" then return "" end
  return env
end


let ACCENT_MODE = std.env("ACCENT_MODE")
if ACCENT_MODE == nil then ACCENT_MODE = "under" end

# Todo: read xresources using xrdb?
function Draw(monitors)
 # Group an array of windows by class names.
 # urgencies are OR'ed, and the number of instances are counted

 function MergeWindows(windows)
  function AreEqual(w1, w2) w1._icon == w2._icon end
  let firstIdx = @[]
  let result = []

  for i in std.range(0, std.len(windows), 1) do 
    let this = windows[i]
    if std.contains(firstIdx, this._icon) then 
      let main = windows[firstIdx[this._icon]]
      main.count = main.count + 1
      main.urgent = main.urgent or this.urgent
      main.focused = main.focused or this.focused
    else 
      this.count = 1
      std.push(result, this)
      firstIdx[this._icon] = i
    end
  end
  return result
 end

 function DrawWindow(window)
  let windowString = " " ++ window._icon
  if window.count > 1 then 
    if window.count < std.len(superscripts) then 
      windowString = windowString ++ superscripts[window.count]
    else 
      windowString = windowString ++ superscripts[std.len(subscripts)]
    end
  else 
    windowString = windowString ++ " "
  end

  if window.urgent then 
    let bg = settings.URGENT_BACKGROUND
    if bg != nil then
      windowString = pygmenter.Background(windowString, bg)
    end
    let fg = settings.URGENT_FOREGROUND
    if fg != nil then 
      windowString = pygmenter.Foreground(windowString, fg)
    end
    let ac = settings.URGENT_ACCENT
    if ac != nil then 
      windowString = pygmenter.Accent(windowString, ac)
    end
  end

  if window.focused then 
    windowString = pygmenter.Overline(windowString, settings.FOCUSED_FOREGROUND)
  end

  return windowString
 end

 function DrawWorkspace(workspace)
   let subscript = subscripts[workspace.idx]
   let wActive = workspace.focused
   let wStr = ""
   let cnt = std.len(workspace.windows)
   # Use a single space to denote an empty workspace
   let emptyWsString = "   "
   if wActive or cnt > 0 then
     wStr = subscript ++ settings.WS_START
     let merged = MergeWindows(workspace.windows)
     let len = std.len(merged)
     for i in std.range(0, len, 1) do
        let window = merged[i]
        wStr = wStr ++ DrawWindow(window)
     end
     if cnt == 0 then wStr = wStr ++ emptyWsString end
     wStr = wStr ++ settings.WS_END
   end

   if wActive then 
     let bg = settings.FOCUSED_BACKGROUND
     if bg != nil then
       wStr = pygmenter.Background(wStr, bg)
     end
     let fg = settings.FOCUSED_FOREGROUND
     if fg != nil then 
       wStr = pygmenter.Foreground(wStr, fg)
     end
     let ac = settings.FOCUSED_ACCENT
     if ac != nil then 
       wStr = pygmenter.Accent(wStr, ac)
     end
   end

   return "%{A1:bspc desktop -f \"" ++ std.trim(workspace.name) ++ "\":}" ++ wStr ++ "%{A}"
 end

 function DrawMonitor(monitor)
   let mStr = ""
   let len = std.len(monitor.workspaces)
   for i in std.range(0, len, 1) do
     let workspace = monitor.workspaces[i]
     mStr = mStr ++ DrawWorkspace(workspace)      
     if i < (len - 1) then mStr = mStr ++ settings.WS_SEPARATOR end
   end 
   return mStr
 end

 let str = ""
 for monitor in std.iter(monitors) do 
   str = str ++ DrawMonitor(monitor)
 end

 return str
end

function BspcSubscribe()
  let event = nil
  return @[
    # bspc emits a ton of event, but it doesn't emit arbitrary property changes to X Windows.
    # Unfortunately, hush doesn't provide great job control in command blocks. We use bash for this instead.
    # here we set up polling to at least update windows twice per second.
    # If an event happens in the meantime we cancel the sleep and draw.
    # Note that we need to manually kill whichever process hasn't finished because 
    # hush waits for all child processes to exit.
    next: function() 
      event = ${ bash -c '
        bspc subscribe -c 1 node_add node_remove node_focus node_flag desktop_focus &
        PID1=$!
        sleep 0.5 &
        PID2=$!
        wait -n
        kill $PID1 $PID2';
      }
      return std.type(event) != "error"
    end,
    stdout: function() return event.stdout end,
  ]
end

let workspaces = GetWindows()
std.print(Draw(workspaces))

let events = BspcSubscribe()

if std.env("DEBUG") != "true" then
  while events.next() do
    std.print(Draw(GetWindows()))
  end
end
